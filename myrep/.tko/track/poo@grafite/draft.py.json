{
    "patches": [
        {
            "label": "2025-10-27_19-14-36",
            "content": "@@ -1561,19 +1561,23 @@\n    self.\n-tip\n+cliente\n  = None%0A\n",
            "lines": "94"
        },
        {
            "label": "2025-10-27_19-19-11",
            "content": "@@ -1420,17 +1420,8 @@\n ne:%0A\n-        %0A\n     \n",
            "lines": "94"
        },
        {
            "label": "2025-10-27_19-19-22",
            "content": "@@ -1412,24 +1412,33 @@\n ite %7C None:%0A\n+        %0A\n         if s\n",
            "lines": "95"
        },
        {
            "label": "2025-10-27_19-19-48",
            "content": "@@ -1415,17 +1415,16 @@\n  %7C None:\n- \n %0A       \n",
            "lines": "94"
        },
        {
            "label": "2025-10-27_19-19-54",
            "content": "@@ -1375,25 +1375,24 @@\n n True%0A%0A    \n- \n def remover(\n",
            "lines": "94"
        },
        {
            "label": "2025-10-27_19-21-56",
            "content": "@@ -1593,25 +1593,24 @@\n urn aux%0A    \n- \n def escrever\n@@ -1941,25 +1941,24 @@\n return%0A%0A    \n- \n def __str__(\n@@ -2028,25 +2028,24 @@\n ain ():%0A    \n- \n lapiseira = \n@@ -2057,17 +2057,16 @@\n eira()%0A%0A\n- \n     whil\n@@ -2166,17 +2166,16 @@\n %22)%0A%0A    \n- \n if args%5B\n@@ -2201,17 +2201,16 @@\n   break%0A\n- \n     elif\n@@ -2254,17 +2254,16 @@\n iseira)%0A\n- \n     elif\n@@ -2326,25 +2326,24 @@\n gs%5B1%5D))%0A    \n- \n elif args%5B0%5D\n@@ -2392,25 +2392,24 @@\n afite) %0A    \n- \n elif args%5B0%5D\n@@ -2460,17 +2460,16 @@\n mover()%0A\n- \n     elif\n",
            "lines": "94"
        },
        {
            "label": "2025-10-27_19-22-20",
            "content": "@@ -1997,25 +1997,16 @@\n e:%7Bself.\n-thickness\n %7D, grafi\n",
            "lines": "94"
        },
        {
            "label": "2025-10-27_19-23-29",
            "content": "@@ -2030,20 +2030,16 @@\n .tip%7D%22%0A%0A\n-def \n main ():\n",
            "lines": "94"
        },
        {
            "label": "2025-10-27_19-23-43",
            "content": "@@ -2213,17 +2213,16 @@\n         \n- \n break%0A  \n",
            "lines": "94"
        },
        {
            "label": "2025-10-27_19-33-35",
            "content": "@@ -1,2642 +1,49 @@\n-class Grafite:%0A    def __init__(self, thickness: float, hardness: str,size:int):%0A        self.__thickness = thickness%0A        self.__hardness = hardness%0A        self.__size = size%0A    def get_thickness(self):%0A        return self.__thickness%0A    def get_hardness(self):%0A        return self.__hardness%0A    def get_size(self):%0A        return self.__size%0A    def set_thickness(self, calibre: float):%0A        self.__thickness = calibre%0A    def set_hardness(self, dureza: str):%0A        self.__hardness = dureza %0A    def set_size(self, tamanho: int):%0A        self.__size = tamanho%0A    def usagePerSheet(self):%0A        if self.hardness == %22HB%22:%0A            return 1%0A        if self.hardness == %222B%22:%0A            return 2%0A        if self.hardness == %224B%22:%0A            return 4%0A        if self.hardness == %226B%22:%0A            return 6%0A    def __str__(self):%0A        return f%22%7Bself.get_thickness()%7D:%7Bself.get_hardness()%7D:%7Bself.get_size()%7D%22%0A%0Aclass Lapiseira:%0A     def __init__(self, thickness: float):%0A        self.tip: Grafite %7C None = None%0A        self.thickness = thickness%0A     def inserir(self, tip: Grafite) -%3E bool:%0A        if self.tip !=  None:%0A            print (%22fail: ja existe grafite%22)%0A            return False%0A        if self.thickness != self.tip.get_thickness:%0A            print (%22fail: calibre incompativel%22)%0A            return False %0A        self.tip = tip%0A        return True%0A%0A     def remover(self) -%3E Grafite %7C None: %0A        if self.tip == None:%0A            print (%22fail: nao existe grafite%22)%0A            return None%0A        aux: Grafite = self.tip%0A        self.tip = None%0A        return aux%0A     def escrever(self):%0A        if self.tip == None:%0A            print(%22fail: nao existe grafite%22)%0A            return%0A        if self.tip.get_size() %3C 10:%0A            print(%22fail:tamanho insuficiente%22)%0A            return%0A        if self.tip.get_size - self.tip.usagePerSheet() %3C 10:%0A            print (%22fail: folha incompleta%22)%0A            return%0A%0A     def __str__(self):%0A        return f%22calibre:%7Bself.thickness%7D, grafite:%7Bself.tip%7D%22%0A%0Adef main ():%0A     lapiseira = Lapiseira()%0A%0A     while True:%0A        line = input()%0A        print(%22$%22+line)%0A        args:list%5Bstr%5D = line.split(%22 %22)%0A%0A        if args%5B0%5D == %22end%22:%0A            break%0A         elif args%5B0%5D == %22show%22:%0A            print(lapiseira)%0A        elif args%5B0%5D == %22init%22:%0A            lapiseira = Lapiseira(int(args%5B1%5D))%0A        elif args%5B0%5D == %22insert%22:%0A            lapiseira.inserir(grafite) %0A        elif args%5B0%5D == %22remove%22:%0A            grafite = lapiseira.remover()%0A        elif args%5B0%5D == %22write%22:%0A            lapiseira.escrever(int(args%5B1%5D))%0A    %0Amain()%0A%0A    %0A%0A     %0A%0A       %0A%0A    \n+@@ -2213,16 +2213,17 @@%0A         %0A+ %0A break%250A  %0A\n",
            "lines": "4"
        },
        {
            "label": "2025-10-27_19-34-32",
            "content": "@@ -2226,32 +2226,33 @@\n   break%0A        \n+ \n elif args%5B0%5D == \n",
            "lines": "94"
        },
        {
            "label": "2025-10-27_19-34-44",
            "content": "@@ -982,14 +982,8 @@\n loat\n- = 0.0\n ):%0A \n",
            "lines": "94"
        },
        {
            "label": "2025-10-27_19-40-49",
            "content": "@@ -2359,20 +2359,18 @@\n piseira(\n-floa\n+in\n t(args%5B1\n",
            "lines": "94"
        },
        {
            "label": "2025-10-27_19-41-17",
            "content": "@@ -1997,17 +1997,16 @@\n calibre:\n- \n %7Bself.th\n@@ -2023,17 +2023,16 @@\n grafite:\n- \n %7Bself.ti\n@@ -2036,40 +2036,8 @@\n .tip\n- if self.tip != None else %22Null%22\n %7D%22%0A%0A\n",
            "lines": "94"
        },
        {
            "label": "2025-10-27_19-42-18",
            "content": "@@ -2061,17 +2061,17 @@\n e else %22\n-n\n+N\n ull%22%7D%22%0A%0A\n",
            "lines": "94"
        },
        {
            "label": "2025-10-27_19-42-28",
            "content": "@@ -2447,168 +2447,8 @@\n t%22:%0A\n-            thickness = float(args%5B1%5D)%0A            hardness = str(args%5B2%5D)%0A            size = int(args%5B3%5D)%0A            pessoa = Pessoa(thickness,hardness,size)%0A\n     \n@@ -2477,14 +2477,15 @@\n rir(\n-pessoa\n+grafite\n ) %0A \n",
            "lines": "94"
        },
        {
            "label": "2025-10-27_19-45-24",
            "content": "@@ -2566,25 +2566,23 @@\n     \n-grafite = Grafite\n+pessoa = Pessoa\n (thi\n@@ -2633,23 +2633,22 @@\n inserir(\n-grafite\n+pessoa\n ) %0A     \n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_19-46-01",
            "content": "@@ -1260,18 +1260,16 @@\n hickness\n-()\n :%0A      \n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_19-49-12",
            "content": "@@ -1238,16 +1238,21 @@\n ness != \n+self.\n tip.get_\n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_19-50-18",
            "content": "@@ -857,17 +857,16 @@\n turn f%22%7B\n-%5B\n self.get\n@@ -917,17 +917,16 @@\n t_size()\n-%5D\n %7D%22%0A%0Aclas\n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_19-50-47",
            "content": "@@ -857,16 +857,17 @@\n turn f%22%7B\n+%5B\n self.get\n@@ -918,16 +918,17 @@\n t_size()\n+%5D\n %7D%22%0A%0Aclas\n@@ -2024,17 +2024,16 @@\n rafite: \n-%5B\n %7Bself.ti\n@@ -2066,17 +2066,16 @@\n  %22null%22%7D\n-%5D\n %22%0A%0Adef m\n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_19-51-26",
            "content": "@@ -2022,16 +2022,17 @@\n rafite: \n+%5B\n %7Bself.ti\n@@ -2065,16 +2065,17 @@\n  %22null%22%7D\n+%5D\n %22%0A%0Adef m\n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_19-53-43",
            "content": "@@ -856,17 +856,16 @@\n eturn f%22\n-%5B\n %7Bself.ge\n@@ -918,17 +918,16 @@\n _size()%7D\n-%5D\n %22%0A%0Aclass\n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_19-57-05",
            "content": "@@ -2784,20 +2784,18 @@\n screver(\n-floa\n+in\n t(args%5B1\n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_19-58-21",
            "content": "@@ -2795,17 +2795,17 @@\n at(args%5B\n-0\n+1\n %5D))%0A    \n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_19-59-57",
            "content": "@@ -2784,19 +2784,21 @@\n screver(\n-str\n+float\n (args%5B0%5D\n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_20-00-21",
            "content": "@@ -2784,21 +2784,19 @@\n screver(\n-float\n+str\n (args%5B0%5D\n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_20-01-42",
            "content": "@@ -2788,18 +2788,20 @@\n ver(\n-str\n+float\n (args%5B\n-1\n+0\n %5D))%0A\n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_20-01-58",
            "content": "@@ -2793,17 +2793,17 @@\n tr(args%5B\n-2\n+1\n %5D))%0A    \n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_20-02-10",
            "content": "@@ -2793,17 +2793,17 @@\n tr(args%5B\n-0\n+2\n %5D))%0A    \n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_20-02-20",
            "content": "@@ -2784,19 +2784,19 @@\n screver(\n-int\n+str\n (args%5B0%5D\n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_20-02-29",
            "content": "@@ -2784,19 +2784,19 @@\n screver(\n-str\n+int\n (args%5B0%5D\n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_20-02-40",
            "content": "@@ -2780,24 +2780,36 @@\n ra.escrever(\n+str(args%5B0%5D)\n )%0A    %0Amain(\n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_20-07-13",
            "content": "@@ -604,34 +604,32 @@\n         if self.\n-__\n hardness == %22HB%22\n@@ -659,34 +659,32 @@\n         if self.\n-__\n hardness == %222B%22\n@@ -714,34 +714,32 @@\n         if self.\n-__\n hardness == %224B%22\n@@ -773,26 +773,24 @@\n     if self.\n-__\n hardness == \n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_20-08-13",
            "content": "@@ -1856,18 +1856,16 @@\n get_size\n-()\n  - self.\n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_20-16-09",
            "content": "@@ -1775,25 +1775,24 @@\n        print\n- \n (%22fail:taman\n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_20-17-07",
            "content": "@@ -1757,17 +1757,16 @@\n size() %3C\n-=\n  10:%0A   \n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_20-18-55",
            "content": "@@ -1745,16 +1745,20 @@\n elf.tip.\n+get_\n size() %3C\n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_20-39-21",
            "content": "@@ -67,15 +67,13 @@\n str,\n- \n size:\n- \n int)\n@@ -1741,28 +1741,24 @@\n if self.tip.\n-get_\n size() %3C= 10\n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_20-43-04",
            "content": "@@ -1755,24 +1755,25 @@\n get_size() %3C\n+=\n  10:%0A       \n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_20-58-44",
            "content": "@@ -1759,17 +1759,16 @@\n size() %3C\n-=\n  10:%0A   \n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_21-01-26",
            "content": "@@ -1790,17 +1790,16 @@\n  (%22fail:\n- \n tamanho \n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_21-09-14",
            "content": "@@ -1774,32 +1774,33 @@\n            print\n+ \n (%22fail: tamanho \n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_21-09-34",
            "content": "@@ -830,43 +830,8 @@\n n 6%0A\n-        else:%0A            return 0%0A\n     \n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_21-10-26",
            "content": "@@ -826,16 +826,51 @@\n eturn 6%0A\n+        else:%0A            return 0%0A\n     def \n",
            "lines": "100"
        },
        {
            "label": "2025-10-27_21-10-40",
            "content": "@@ -1836,17 +1836,8 @@\n urn%0A\n-        %0A\n     \n@@ -1964,58 +1964,8 @@\n urn%0A\n-        self.tip.get_size - self.tip.usagePerSheet\n %0A   \n",
            "lines": "98"
        },
        {
            "label": "2025-10-27_21-17-35",
            "content": "@@ -1998,26 +1998,8 @@\n size\n-(self.tip.get_size\n  - s\n@@ -2019,17 +2019,16 @@\n PerSheet\n-)\n %0A     de\n",
            "lines": "99"
        },
        {
            "label": "2025-10-27_21-18-24",
            "content": "@@ -2004,34 +2004,32 @@\n elf.tip.get_size\n-()\n  - self.tip.usag\n@@ -2037,18 +2037,16 @@\n PerSheet\n-()\n )%0A     d\n",
            "lines": "99"
        },
        {
            "label": "2025-10-27_21-18-39",
            "content": "@@ -1981,25 +1981,25 @@\n     \n-%0A        gasto = \n+self.tip.get_size\n (sel\n@@ -2045,47 +2045,9 @@\n et()\n-%0A        self.tip.get_size(gasto)%0A     \n+)\n %0A   \n",
            "lines": "99"
        },
        {
            "label": "2025-10-27_21-23-57",
            "content": "@@ -1994,16 +1994,17 @@\n gasto = \n+(\n self.tip\n",
            "lines": "102"
        },
        {
            "label": "2025-10-27_21-24-25",
            "content": "@@ -1965,24 +1965,129 @@\n      return%0A\n+        %0A        gasto = self.tip.get_size() - self.tip.usagePerSheet()%0A        self.tip.get_size(gasto)%0A\n      %0A     d\n",
            "lines": "102"
        },
        {
            "label": "2025-10-27_21-30-22",
            "content": "@@ -1978,76 +1978,8 @@\n     \n-   self.tip.set_size(self.tip.set_size() - self.tip.usagePerSheet())\n %0A   \n",
            "lines": "99"
        },
        {
            "label": "2025-10-27_21-34-37",
            "content": "@@ -1981,32 +1981,8 @@\n     \n-%0A        novo_tamanho = \n self\n@@ -1987,36 +1987,32 @@\n lf.tip.set_size(\n-) - \n self.tip.usagePe\n@@ -2008,64 +2008,46 @@\n tip.\n-usagePerSheet()%0A        self.tip.set_size(novo_tamanho)%0A\n+set_size() - self.tip.usagePerSheet())\n %0A   \n",
            "lines": "99"
        },
        {
            "label": "2025-10-27_21-37-14",
            "content": "@@ -1968,16 +1968,135 @@\n   return\n+%0A        %0A        novo_tamanho = self.tip.set_size() - self.tip.usagePerSheet()%0A        self.tip.set_size(novo_tamanho)\n %0A%0A     d\n",
            "lines": "102"
        },
        {
            "label": "2025-10-27_21-40-06",
            "content": "@@ -1832,25 +1832,24 @@\n  return%0A\n-%0A\n         \n gasto = \n@@ -1844,91 +1844,8 @@\n     \n-gasto = self.tip.usagePerSheet()%0A        novo_tamanho = self.tip.get_size() - size%0A\n %0A   \n@@ -1950,16 +1950,16 @@\n pleta%22)%0A\n+\n         \n@@ -1974,49 +1974,8 @@\n rn%0A%0A\n-        self.tip.set_size(novo_tamanho)%0A%0A\n     \n",
            "lines": "99"
        },
        {
            "label": "2025-10-27_21-52-41",
            "content": "@@ -1919,21 +1919,20 @@\n ize() - \n-gasto\n+size\n %0A%0A      \n",
            "lines": "104"
        },
        {
            "label": "2025-10-27_21-53-25",
            "content": "@@ -2039,42 +2039,8 @@\n a%22)%0A\n-            self.tip.set_size(10)%0A\n     \n",
            "lines": "104"
        },
        {
            "label": "2025-10-27_21-55-18",
            "content": "class Grafite:\n    def __init__(self, thickness: float, hardness: str, size: int):\n        self.__thickness = thickness\n        self.__hardness = hardness\n        self.__size = size\n    def get_thickness(self):\n        return self.__thickness\n    def get_hardness(self):\n        return self.__hardness\n    def get_size(self):\n        return self.__size\n    def set_thickness(self, calibre: float):\n        self.__thickness = calibre\n    def set_hardness(self, dureza: str):\n        self.__hardness = dureza \n    def set_size(self, tamanho: int):\n        self.__size = tamanho\n    def usagePerSheet(self):\n        if self.__hardness == \"HB\":\n            return 1\n        if self.__hardness == \"2B\":\n            return 2\n        if self.__hardness == \"4B\":\n            return 4\n        if self.__hardness == \"6B\":\n            return 6\n    def __str__(self):\n        return f\"[{self.get_thickness()}:{self.get_hardness()}:{self.get_size()}]\"\n\nclass Lapiseira:\n     def __init__(self, thickness: float = 0.0):\n        self.tip: Grafite | None = None\n        self.thickness = thickness\n     def inserir(self, tip: Grafite) -> bool:\n        if self.tip !=  None:\n            print (\"fail: ja existe grafite\")\n            return False\n        if self.thickness != tip.get_thickness():\n            print (\"fail: calibre incompativel\")\n            return False \n        self.tip = tip\n        return True\n\n     def remover(self) -> Grafite | None: \n        if self.tip == None:\n            print (\"fail: nao existe grafite\")\n            return None\n        aux: Grafite = self.tip\n        self.tip = None\n        return aux\n     def escrever(self):\n        if self.tip == None:\n            print(\"fail: nao existe grafite\")\n            return\n        if self.tip.get_size() <= 10:\n            print(\"fail: tamanho insuficiente\")\n            return\n\n        gasto = self.tip.usagePerSheet()\n        novo_tamanho = self.tip.get_size() - gasto\n\n        if self.tip.get_size() - self.tip.usagePerSheet() < 10:\n            print (\"fail: folha incompleta\")\n            self.tip.set_size(10)\n            return\n\n        self.tip.set_size(novo_tamanho)\n\n     def __str__(self):\n        return f\"calibre: {self.thickness}, grafite: {self.tip if self.tip != None else \"null\"}\"\n\ndef main ():\n     lapiseira = Lapiseira()\n\n     while True:\n        line = input()\n        print(\"$\"+line)\n        args:list[str] = line.split(\" \")\n\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"show\":\n            print(lapiseira)\n        elif args[0] == \"init\":\n            lapiseira = Lapiseira(float(args[1]))\n        elif args[0] == \"insert\":\n            thickness = float(args[1])\n            hardness = str(args[2])\n            size = int(args[3])\n            grafite = Grafite(thickness,hardness,size)\n            lapiseira.inserir(grafite) \n        elif args[0] == \"remove\":\n            grafite = lapiseira.remover()\n        elif args[0] == \"write\":\n            lapiseira.escrever()\n    \nmain()\n\n    \n\n     \n\n       \n\n    ",
            "lines": "105"
        }
    ]
}